# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pipeline_pb2 as pipeline__pb2


class PipelineServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ingest = channel.stream_unary(
        '/protogen.PipelineService/Ingest',
        request_serializer=pipeline__pb2.IngestRequest.SerializeToString,
        response_deserializer=pipeline__pb2.IngestResponse.FromString,
        )


class PipelineServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Ingest(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PipelineServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ingest': grpc.stream_unary_rpc_method_handler(
          servicer.Ingest,
          request_deserializer=pipeline__pb2.IngestRequest.FromString,
          response_serializer=pipeline__pb2.IngestResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protogen.PipelineService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
